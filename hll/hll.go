package hll

import (
	"math"
	"math/bits"
)

// Counter ...
type Counter struct {
	slots [64]uint8
}

// InitCounter ...
func InitCounter(c *Counter) {
	for i := range c.slots {
		c.slots[i] = 0
	}
}

const indexLen = 6
const m = 1 << indexLen

const indexShift = 64 - indexLen
const indexMask = ((1 << indexLen) - 1) << indexShift

const alpha = 0.709

var rawEstimateData = []float64{
	46, 46.1902, 47.271, 47.8358, 48.8142, 49.2854, 50.317, 51.354, 51.8924, 52.9436, 53.4596, 54.5262,
	55.6248, 56.1574, 57.2822, 57.837, 58.9636, 60.074, 60.7042, 61.7976, 62.4772, 63.6564, 64.7942, 65.5004,
	66.686, 67.291, 68.5672, 69.8556, 70.4982, 71.8204, 72.4252, 73.7744, 75.0786, 75.8344, 77.0294, 77.8098,
	79.0794, 80.5732, 81.1878, 82.5648, 83.2902, 84.6784, 85.3352, 86.8946, 88.3712, 89.0852, 90.499, 91.2686,
	92.6844, 94.2234, 94.9732, 96.3356, 97.2286, 98.7262, 100.3284, 101.1048, 102.5962, 103.3562, 105.1272,
	106.4184, 107.4974, 109.0822, 109.856, 111.48, 113.2834, 114.0208, 115.637, 116.5174, 118.0576, 119.7476,
	120.427, 122.1326, 123.2372, 125.2788, 126.6776, 127.7926, 129.1952, 129.9564, 131.6454, 133.87, 134.5428,
	136.2, 137.0294, 138.6278, 139.6782, 141.792, 143.3516, 144.2832, 146.0394, 147.0748, 148.4912, 150.849,
	151.696, 153.5404, 154.073, 156.3714, 157.7216, 158.7328, 160.4208, 161.4184, 163.9424, 165.2772, 166.411,
	168.1308, 168.769, 170.9258, 172.6828, 173.7502, 175.706, 176.3886, 179.0186, 180.4518, 181.927, 183.4172,
	184.4114, 186.033, 188.5124, 189.5564, 191.6008, 192.4172, 193.8044, 194.997, 197.4548, 198.8948, 200.2346,
	202.3086, 203.1548, 204.8842, 206.6508, 206.6772, 209.7254, 210.4752, 212.7228, 214.6614, 215.1676, 217.793,
	218.0006, 219.9052, 221.66, 223.5588, 225.1636, 225.6882, 227.7126, 229.4502, 231.1978, 232.9756, 233.1654,
	236.727, 238.1974, 237.7474, 241.1346, 242.3048, 244.1948, 245.3134, 246.879, 249.1204, 249.853, 252.6792,
	253.857, 254.4486, 257.2362, 257.9534, 260.0286, 260.5632, 262.663, 264.723, 265.7566, 267.2566, 267.1624,
	270.62, 272.8216, 273.2166, 275.2056, 276.2202, 278.3726, 280.3344, 281.9284, 283.9728, 284.1924, 286.4872,
	287.587, 289.807, 291.1206, 292.769, 294.8708, 296.665, 297.1182, 299.4012, 300.6352, 302.1354, 304.1756,
	306.1606, 307.3462, 308.5214, 309.4134, 310.8352, 313.9684, 315.837, 316.7796, 318.9858,
}

var biasData = []float64{
	45, 44.1902, 43.271, 42.8358, 41.8142, 41.2854, 40.317, 39.354, 38.8924, 37.9436, 37.4596, 36.5262,
	35.6248, 35.1574, 34.2822, 33.837, 32.9636, 32.074, 31.7042, 30.7976, 30.4772,
	29.6564, 28.7942, 28.5004, 27.686, 27.291, 26.5672, 25.8556, 25.4982, 24.8204,
	24.4252, 23.7744, 23.0786, 22.8344, 22.0294, 21.8098, 21.0794, 20.5732, 20.1878,
	19.5648, 19.2902, 18.6784, 18.3352, 17.8946, 17.3712, 17.0852, 16.499, 16.2686, 15.6844,
	15.2234, 14.9732, 14.3356, 14.2286, 13.7262, 13.3284, 13.1048, 12.5962, 12.3562, 12.1272,
	11.4184, 11.4974, 11.0822, 10.856, 10.48, 10.2834, 10.0208, 9.637, 9.51739999999999, 9.05759999999999,
	8.74760000000001, 8.42700000000001, 8.1326, 8.2372, 8.2788, 7.6776, 7.79259999999999, 7.1952,
	6.9564, 6.6454, 6.87, 6.5428, 6.19999999999999, 6.02940000000001, 5.62780000000001, 5.6782, 5.792,
	5.35159999999999, 5.28319999999999, 5.0394, 5.07480000000001, 4.49119999999999, 4.84899999999999, 4.696,
	4.54040000000001, 4.07300000000001, 4.37139999999999, 3.7216, 3.7328, 3.42080000000001, 3.41839999999999,
	3.94239999999999, 3.27719999999999, 3.411, 3.13079999999999, 2.76900000000001, 2.92580000000001, 2.68279999999999,
	2.75020000000001, 2.70599999999999, 2.3886, 3.01859999999999, 2.45179999999999, 2.92699999999999,
	2.41720000000001, 2.41139999999999, 2.03299999999999, 2.51240000000001, 2.5564, 2.60079999999999,
	2.41720000000001, 1.80439999999999, 1.99700000000001, 2.45480000000001, 1.8948, 2.2346, 2.30860000000001,
	2.15479999999999, 1.88419999999999, 1.6508, 0.677199999999999, 1.72540000000001, 1.4752, 1.72280000000001,
	1.66139999999999, 1.16759999999999, 1.79300000000001, 1.00059999999999, 0.905200000000008, 0.659999999999997,
	1.55879999999999, 1.1636, 0.688199999999995, 0.712600000000009, 0.450199999999995, 1.1978, 0.975599999999986,
	0.165400000000005, 1.727, 1.19739999999999, -0.252600000000001, 1.13460000000001, 1.3048, 1.19479999999999,
	0.313400000000001, 0.878999999999991, 1.12039999999999, 0.853000000000009, 1.67920000000001, 0.856999999999999,
	0.448599999999999, 1.2362, 0.953399999999988, 1.02859999999998, 0.563199999999995, 0.663000000000011,
	0.723000000000013, 0.756599999999992, 0.256599999999992, -0.837600000000009, 0.620000000000005,
	0.821599999999989, 0.216600000000028, 0.205600000000004, 0.220199999999977, 0.372599999999977,
	0.334400000000016, 0.928400000000011, 0.972800000000007, 0.192400000000021, 0.487199999999973,
	-0.413000000000011, 0.807000000000016, 0.120600000000024, 0.769000000000005, 0.870799999999974,
	0.66500000000002, 0.118200000000002, 0.401200000000017, 0.635199999999998, 0.135400000000004,
	0.175599999999974, 1.16059999999999, 0.34620000000001, 0.521400000000028, -0.586599999999976,
	-1.16480000000001, 0.968399999999974, 0.836999999999989, 0.779600000000016, 0.985799999999983,
}

// Add ...
func (c *Counter) Add(e uint64) {
	index := (e & indexMask) >> indexShift
	newHash := e << indexLen
	sizeLog := uint8(bits.LeadingZeros64(newHash) + 1)
	if c.slots[index] < sizeLog {
		c.slots[index] = sizeLog
	}
}

const threshold float64 = 40

// Estimate ...
func (c *Counter) Estimate() float64 {
	inverseSum := float64(0)
	for _, e := range c.slots {
		v := uint64(1 << e)
		num := float64(v)
		inverseSum += 1 / num
	}
	estimate := m * m * alpha / inverseSum

	if estimate <= 5*m {
		estimate = estimate - c.estimateBias(estimate)
	}

	h := estimate

	v := c.countZeroRegisters()
	if v > 0 {
		h = c.linearCount(v)
	}

	if h <= threshold {
		return h
	}
	return estimate
}

func (c *Counter) countZeroRegisters() int {
	var count int
	for _, e := range c.slots {
		if e == uint8(0) {
			count++
		}
	}
	return count
}

func (c *Counter) linearCount(v int) float64 {
	return m * math.Log(m/float64(v))
}

func lowerBound(a []float64, v float64) int {
	first := 0
	last := len(a)
	for first != last {
		mid := (first + last) / 2
		if v <= a[mid] {
			last = mid
		} else {
			first = mid + 1
		}
	}
	return first
}

func (c *Counter) estimateBias(estimate float64) float64 {
	found := lowerBound(rawEstimateData, estimate)
	if found == 0 {
		found = 1
	} else if found == len(rawEstimateData) {
		found = len(rawEstimateData) - 1
	}

	begin := rawEstimateData[found-1]
	end := rawEstimateData[found]

	resultBegin := biasData[found-1]
	resultEnd := biasData[found]

	return (estimate-begin)/(end-begin)*(resultEnd-resultBegin) + resultBegin
}
